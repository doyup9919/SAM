---
title: "Untitled"
author: "do yeop gwak"
date: '2021 7 1 '
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

year,month,day :	date of departure
dep_time,arr_time	: Actual departure and arrival times, local tz
sched_dep_time,sched_arr_time	: Scheduled departure and arrival times, local tz
dep_delay,arr_delay :	Departure and arrival delays, in minutes
hour,minute	Time of scheduled departure broken into hour and minutes.
carrier :	Two letter carrier abbreviation. See airlines to get name
tailnum	 : Plane tail number
flight :	Flight number
origin,dest :	Origin and destination
air_time :	Amount of time spent in the air
distance :	Distance flown
time_hour :	Scheduled date and hour of the flight as a POSIXct date

```{r}
library(nycflights13)
library(tidyverse)
library(dplyr)



```

your turn 1.1

```{r}

a <- flights %>% filter(dep_delay >= 120)  %>%  head(10)
a$carrier

```
your turn1.2
```{r}
b <- flights %>%  filter(dep_delay <=0 | arr_delay >0) %>%  head(10)
b$carrier

```
your turn 1.3
```{r}
c <- flights %>%  filter(dep_delay >= 60 | arr_delay <= -30)  %>% head(10)

c$carrier

```
your turn 1.4


```{r}

is.na(flights$dep_time)
sum(is.na(flights$dep_time))
sum(is.na(flights$dep_delay))

sum(is.na(flights$arr_time))
sum(is.na(flights$arr_delay))

sum(is.na(flights$sched_dep_time))
sum(is.na(flights$sched_arr_time))

```

#예정된 도착시간과 예정된 출발시각의 결측값은 없다.
출발시간과 출발 지연 시간의 결측값의 갯수가 같다.
도착시간과 도착 지연 시간의 결측값의 갯수는 다르게 나온다.

your turn 2.1

```{r}
flights %>% arrange((dep_delay))
flights %>% arrange(desc(dep_delay))
flights %>% arrange(year, month, desc(day))


mutate(flights,speed = distance/air_time)
max(flights$speed, na.rm=T)

((flights %>% arrange(desc(speed)))[,"carrier"])[1,]

```
your turn 3.1


```{r}
flights %>% select(starts_with("arr")|starts_with("dep"))

```


your turn 4.1

```{r}

flights2 -> flights %>% select(ends_with("dep_time"))

flights2 %>% mutate(hour = dep_time %/% 60,
                    minute = dep_time %% 60)
```

```{r}
f <- flights %>% transmute(air_time - (arr_time-dep_time)) 
head(f)
length(which(f>0))
length(which(f<0))
```

공중에서 비행하는 시간과 로착시간에서 출발시간을 뺀 크기를 고려해 보았을 때 대부분은 비행시간이 더 짧은것을 알 수 있다. 이는 도착과 출발의 지연시간들을 고려해보면 비행하기 전후로 땅에 머무르는 시간을 포함하기에 비행시간이 대부분 짧은 것이라고 추측해 볼 수 있다. 


```{r}

flights$delay <- flights %>% transmute(delay = dep_time - sched_dep_time )
length(which(flights$delay == flights$dep_delay))
length(which(flights$delay != flights$dep_delay))
flights %>%  select(delay, dep_delay)

```
출발예정시간과 실제 출발 시간을 비교해 직접 계산한 지연 시간을 보았을 때 출발 지연시간 변수와 같아야 하는데 값이 다른 변수들이 존재하는걸로 보아 값을 잘못 입력하거나 지연시간을 계산하는데에 오류가 있었을 가능성을 생각해볼 수 있다.


your turn 5.1

```{r}
q <- flights %>% group_by(carrier) %>% summarise(mean = mean(dep_delay,na.rm=TRUE))
w <- flights %>% group_by(carrier) %>% summarise(sd = sd(dep_delay, na.rm=TRUE))
q %>% arrange(desc(mean))
w %>% arrange(desc(sd))
```
#F9가 20.215로 가장 평균이 크고, HA가 74로 표준편차가 가장 큼.
-> 이로 인해 F9 와 HA 모두 신뢰도가 다른 항공사에 비해 낮은 항공사로 분류될 수 있을 것이다.

```{r}
r <- flights %>% group_by(month,day) %>% summarise(mean1=mean(dep_delay, na.rm=T), n = n())
r %>% arrange(desc(mean1))
```
# 3월8일이 가장 평균 지연시간이 길었던 날이다.


```{r}
t <- flights %>% group_by(month=3,day=8,carrier) %>% summarise(sd1 = sd(dep_delay,na.rm = TRUE))
t %>% arrange(sd1)
```
# US가 28로 표준편차의 값이 가장 작게 나온다.
 따라서 3월 8일에는 US의 항공사의 신뢰도가 가장 높을 것으로 예상된다.
