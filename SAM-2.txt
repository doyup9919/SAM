넘파이 ndarray - n차원 dimension array 객체

import numpy as np
array1 = np.array([1,2,3])
array2 = np.array([[1,2,3],[2,3,4]])

ndarray 형태와 차원

[123] - 1차원 - (3,)
[[123] - 2차원 - (2,3)
[456]]

ndarray내의 데이터 타입은 그 연산의 특성상 같은 데이터 타입만 가능.

변경을 원하는 타입을 astype()에 인자로 입력
대용량 데이터를 ndarray로 만들 때 메모리를 절약하기 위해 자주 사용.
0,1,2와 같이 크지 않는 범위의 숫자를 위해 64bit를 사용할 필요 x

axis0 행방향 axis1 열방향

ndarray를 편리하게 생성하기 - arange,zeros,ones

np.arrange(10) -> [0123456789]
np.zeros((3,2),dtype='int32') -> [[00]
                                                   [00]
                                                   [00]]
np.ones((3,2)) -> [[1.1.]
                            [1.1.]
                            [1.1.]]

reshape() : ndarray의 차원과 크기를 변경
array1 [0123456789]
reshape(2,5) : 2차원의 2*5 ndarray로 변환
변환된 array [[01234]
                     [56789]]

reshape(-1,5) : 로우 axis인자가 -1, 컬럼 axis 인자가 5
고정된 5개의 컬럼 axis 크기에 맞는 로우 axis 크기를 자동으로 생성해 변환

array1d [01234]
-> reshape(-1,1) : 2차원으로 변환하되 컬럼 axis 크기가 1로 고정 -> shpae는 (5,1) [[0][1][2][3][4]]

array2d [[0][1][2][3][4]] -> reshape(-1,) : 1차원으로 변환
shape는 (5,) : [01234]

ndarray의 데이터 세트 선책하기 - 인덱싱
1. 특정 위치의 단일값 추출
2. 슬라이싱 :을 이용해 연속된 값을 선택
3.  팬시 인덱싱
4. 불린 인덱싱 (중요)

배열의 정렬 - sort()와 argsort()

np.sort(): 원 행렬은 그대로 유지한 채 원 행렬의 정렬된 행렬을 반환
ndarray.sort() 는 원 행렬 자체를 정렬한 형태로 변환하며 반환값은 none

둘 다 오름차순으로 행렬 내 원소를 정렬
내림차순 하려면 np.sort()[::-1] 해야함

 argsort() 
- 원본 행렬 정렬시 정렬된 행렬의 원래 인덱스를 필요로 할 때 사용 

np.dot(A,B) - 행렬 내적
np.transpose(A)

판다스 - 데이터 처리를 위해 존재하는 가장 인기 있는 라이브러리
대부분의 데이터 세트는 2차원 데이터이다.
행과 열의 2차원 데이터가 인기 있는 이유는 바로 인간이
가장 이해하기 쉬운 데이터 구조이면서 효과적으로 데이터를 담을 수 있는 구조이다. 판다스는 이처럼 행과 열로
이뤄진 2차원 데이터를 효율적으로 가공/처리할 수 있는
다양하고 휼륭한 기능 제공

dataframe, series, index
