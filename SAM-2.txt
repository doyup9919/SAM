넘파이 ndarray - n차원 dimension array 객체

import numpy as np
array1 = np.array([1,2,3])
array2 = np.array([[1,2,3],[2,3,4]])

ndarray 형태와 차원

[123] - 1차원 - (3,)
[[123] - 2차원 - (2,3)
[456]]

ndarray내의 데이터 타입은 그 연산의 특성상 같은 데이터 타입만 가능.

변경을 원하는 타입을 astype()에 인자로 입력
대용량 데이터를 ndarray로 만들 때 메모리를 절약하기 위해 자주 사용.
0,1,2와 같이 크지 않는 범위의 숫자를 위해 64bit를 사용할 필요 x

axis0 행방향 axis1 열방향

ndarray를 편리하게 생성하기 - arange,zeros,ones

np.arrange(10) -> [0123456789]
np.zeros((3,2),dtype='int32') -> [[00]
                                                   [00]
                                                   [00]]
np.ones((3,2)) -> [[1.1.]
                            [1.1.]
                            [1.1.]]

reshape() : ndarray의 차원과 크기를 변경
array1 [0123456789]
reshape(2,5) : 2차원의 2*5 ndarray로 변환
변환된 array [[01234]
                     [56789]]

reshape(-1,5) : 로우 axis인자가 -1, 컬럼 axis 인자가 5
고정된 5개의 컬럼 axis 크기에 맞는 로우 axis 크기를 자동으로 생성해 변환

array1d [01234]
-> reshape(-1,1) : 2차원으로 변환하되 컬럼 axis 크기가 1로 고정 -> shpae는 (5,1) [[0][1][2][3][4]]

array2d [[0][1][2][3][4]] -> reshape(-1,) : 1차원으로 변환
shape는 (5,) : [01234]

ndarray의 데이터 세트 선책하기 - 인덱싱
1. 특정 위치의 단일값 추출
2. 슬라이싱 :을 이용해 연속된 값을 선택
3.  팬시 인덱싱
4. 불린 인덱싱 (중요)

배열의 정렬 - sort()와 argsort()

np.sort(): 원 행렬은 그대로 유지한 채 원 행렬의 정렬된 행렬을 반환
ndarray.sort() 는 원 행렬 자체를 정렬한 형태로 변환하며 반환값은 none

둘 다 오름차순으로 행렬 내 원소를 정렬
내림차순 하려면 np.sort()[::-1] 해야함

 argsort() 
- 원본 행렬 정렬시 정렬된 행렬의 원래 인덱스를 필요로 할 때 사용 

np.dot(A,B) - 행렬 내적
np.transpose(A)

판다스 - 데이터 처리를 위해 존재하는 가장 인기 있는 라이브러리
대부분의 데이터 세트는 2차원 데이터이다.
행과 열의 2차원 데이터가 인기 있는 이유는 바로 인간이
가장 이해하기 쉬운 데이터 구조이면서 효과적으로 데이터를 담을 수 있는 구조이다. 판다스는 이처럼 행과 열로
이뤄진 2차원 데이터를 효율적으로 가공/처리할 수 있는
다양하고 휼륭한 기능 제공

dataframe, series, index



데이터프레임의 drop()
주의할 부분 inplace=FALSE
로우 삭제 axis=0 컬럼은 axis=1
디폴트가 0 이다 보니 컬럼 삭제할 때 바꿔줘야 함
원본에 드롭된 결과를 적용할 ㅇ우에는 inplace=TRUE이용
seies 객체는 index 객체를 포함하지만 series 객체에 연산 함수를 적용할 때 index는 연산에서 제외.

[] : 컬럼 기반 필터링 불린 인덱식 필터링 ㅔ공
ix[], loc[], iloc[]
명칭/위치 기반 인덱싱 제공
불린 인덱싱 - 조건에 따른 인덱싱

판다스 apply lambda
apply함수에 lambda 식을 결합해 dataframe이나 seriesㅢ 레코드별로 데이터를 가공하는 기능을 공한다.
판다스의 경우 컬럼에 일괄적으로 데이터 가공을 ㅏ는 것이 속도 면에서 어쩔 수 없이 사용해야 함.

판다스 summary
2차원에서 사용
매우 편리하고 다양한 데이터 처리 api를 공하지만 이를 다 알기에는 많은 시간과 노력이 필요

머신러닝이란 애플리케이션 수정하지 않고도 데이터를 기반으로 패턴을 학습하고 결과를 추론하는 알고리즘 기법을 통칭
직관적인 문법, 많은 라이브러리, 뛰어난 샌산성을 가지는 이썬 언어를 기반으로 한 머신러닝 ㅐ플리케이션은 유연성, 통합성등 많은 장점을 사용자에게 제공해 준다.

파이썬 기반의 머신러닝을 익히기 위해 넘파이,판다스,시각화 등의 다양한 지원 패키지들도 같이 학습이 되어야 한다. 기본내용은 숙지하되 상세한 사용법은 찾아가면서 구현하는것이 패키지 익히는데 도움이 더 될 것.
