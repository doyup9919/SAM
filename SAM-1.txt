머신러닝 필요한 이유

- 현실 세계의 복잡한 업무와 규칙을 구현하기 위한 매우 복잡하고 방대한 코드

- 수시로 변하는 업무 환경,정책,사용자 성향에 따른 어플리케이션의 구현의 어려움

머신러닝 알고리즘은 - 복잡한 문제를 데이터 기반으로 숨겨진 패턴을 인지 해결

통계적인 신뢰도를 강화하고 에측오류를 최소화 하려함.

머신 러닝 1. 지도학습 (분류,회귀,시각,음성 감지인지)
: 명확한 결정값이 주어진 데이터를 학습 


2. 비지도학습(군집화, 차원축소)
: 결정값이 주어지지 않는 데이터를 학습

머신러닝 알고리즘(기호주의, 연결주의, 유전 알고리즘, 베이지안 통게, 유츄주의)

머신러닝의 단점
- 데이터에 너무 의존적
- 실제 환경 데이터 적용시 과적합 되기 쉬움.
- 복잡한 머신러닝 알고리즘으로 도출된 결과에 대한 논리적이 이해가 어려울 수 있음.
- 데이터만 집어 넣으면 자동으로 최적화된 결과를 도출할 것이라는 것은 환상이다.
(끊임 없이 모델을 개선하기 위한 노력이 필요하기 때문에 최적의 알고리즘과 파라미터를 구성할 수 있는 고급 능력이 필요)



r과 python 비교 - 통계분석 관점

r은 통계 전용 프로그램 언어
파이썬은 직관적인 문법과 객체지향과 함수형 프로그래밍 모두를 포괄하는 유연한 프로그램 아키텍쳐, 다양한 라이브러리 등의 큰 강점을 가지면서 프로그래밍 세계의 주류를 향해 돌진하고 있는 언어.

파이썬은 구글 페이스북등 it업계에서도 파이썬의 높은 생산성으로 인해 활용도가 매우 높음.
오픈 소스 계열의 전폭적인 지원
많은 라이브러리 지원으로 어떠한 유형의 개발도 쉽게 가능
interpreter language의 특성상 속도는 느리지만 유연함.

-> 분석영역을 넘어 ML 기반의 다양한 앱 개발이 쉽게 가능
기존 앱과의 연계도 쉬움
enterprise 아키텍처에도 연게,확장가능

배열/선형대수 - 넘파이
통계패키지 - scipy
데이터 핸들링 - pandas
시각화 - matplotlib, seaborn
대화형 파이썬 툴 - jupyter
